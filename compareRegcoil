#!/usr/bin/env python

import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import inspect, os
from scipy.io import netcdf
import sys

myname = inspect.getfile(inspect.currentframe())
print
print "This is " + myname
print "Usage:"
print "  "+myname+" <List of 1 or more regcoil_out.XXX.nc files>"
print 

if len(sys.argv) < 2:
    print "Error! You must list at least one regcoil_out.XXX.nc file as a command-line argument."
    exit(1)


lambda_many = []
chi2_B_many = []
chi2_M_many = []
max_B_many = []
max_M_many = []
max_lambda = 0

for whichFile in range(1,len(sys.argv)):
    filename = sys.argv[whichFile]
    f = netcdf.netcdf_file(filename,'r',mmap=False)
    # We use 'lambdas' instead of 'lambda' to avoid conflict with python's keyword lambda.
    lambdas = f.variables['lambda'][()]
    permutation = np.argsort(lambdas)
    lambdas = lambdas[permutation]
    if lambdas[-1]>1.0e199:
        lambdas[-1] = np.inf

    lambda_many.append(lambdas)
    max_lambda = np.max((max_lambda,np.max(lambdas)))
    print "max_lambda:",max_lambda

    chi2_B_many.append(f.variables['chi2_B'][()][permutation])
    max_B_many.append(f.variables['max_Bnormal'][()][permutation])

    chi2_M_many.append(f.variables['chi2_M'][()][permutation])
    max_M_many.append(f.variables['max_M'][()][permutation])

    f.close()

    print "Read data from file "+filename



##########################################################
# Make plots
##########################################################

for whichFigure in range(2):
    if whichFigure==0:
        data_M = max_M_many
        label_M = 'max M [Amperes / meter]'
        data_B = max_B_many
        label_B = 'max B [Tesla]'
    else:
        data_M = chi2_M_many
        label_M = 'chi2_M [Amperes^2 meters^2]'
        data_B = chi2_B_many
        label_B = 'chi2_B [Tesla^2 meters^2]'


    matplotlib.rcParams.update({'font.size': 9})
    fig = plt.figure(figsize=(14,7))
    fig.patch.set_facecolor('white')

    numRows=2;
    numCols=2;

    plt.subplot(numRows,numCols,1)
    for whichFile in range(len(sys.argv)-1):
        filename = sys.argv[whichFile+1]
        plt.loglog(data_M[whichFile],data_B[whichFile],'.-',label=filename)
    plt.xlabel(label_M)
    plt.ylabel(label_B)
    plt.grid(True)

    plt.subplot(numRows,numCols,2)
    for whichFile in range(len(sys.argv)-1):
        filename = sys.argv[whichFile+1]
        plt.loglog(lambda_many[whichFile],data_B[whichFile],'.-',label=filename)
    plt.xlabel('lambda [T^2 / A^2]')
    plt.ylabel(label_B)
    plt.grid(True)

    plt.subplot(numRows,numCols,4)
    for whichFile in range(len(sys.argv)-1):
        filename = sys.argv[whichFile+1]
        plt.loglog(lambda_many[whichFile],data_M[whichFile],'.-',label=filename)
    plt.xlabel('lambda [T^2 / A^2]')
    plt.ylabel(label_M)
    plt.legend(fontsize=7,loc=0)
    plt.grid(True)

    plt.subplots_adjust(left=0.05,bottom=0.08,right=0.99,top=0.93,wspace=0.15,hspace=0.22)

    titleString = "Plot generated by "+ os.path.abspath(inspect.getfile(inspect.currentframe())) + "\nRun in "+os.getcwd()
    plt.figtext(0.5,0.99,titleString,horizontalalignment='center',verticalalignment='top')

plt.show()

